
#Stage 1
# 1 Base Image(OS)/software require for program

FROM openjdk:17-jdk-alpine AS javabuilder

# 2 Working directory for app
#RUN mkdir -p /app/desps
WORKDIR /app


# 3 code to create -- copy code from your host to container working directory

COPY src/Main.java /app/Main.java

COPY quotes.txt /app/quotes.txt

# extra step
#RUN mkdir -p /app/deps
#Runmkdir -p /app/deps


# 4 Run the command to install liberies or compile code
#Explanation of -d /app/deps:  -d → Specifies the output directory for .class files.
#/app/deps → All compiled .class files will go inside /app/deps.
#This keeps our container clean and structured, separating source code from compiled files.

RUN javac -d /app /app/Main.java

#Stage 2 run time stage using distroless images

FROM gcr.io/distroless/java17-debian12
#FROM openjdk:17-jdk-alpine  # Change from distroless to Alpine for debugging
WORKDIR /app

#COPY --from=javabuilder /app src/Main.java
#COPY --from=javabuilder /app quotes.txt
COPY --from=javabuilder /app/ /app/

## Copy the required file
#In the first build stage (javabuilder), we copy quotes.txt into the container:
#But this file only exists in the first stage and is not available in the final container.
#Since we need it in the runtime stage, we must explicitly copy it:

#COPY --from=javabuilder quotes.txt /app/deps/quotes.txt

# 5 Expose the port

EXPOSE 8000

# 6 Serve the app keep it running
#Once our Java code is compiled, we need to run the program.By default, Java looks for compiled .class files in the current directory (.).
#Since we placed our .class files inside /app/deps, we must tell Java where to find them:
#-cp (short for --classpath) → Tells Java where to find compiled .class files.
#/app/deps → The directory where javac -d /app/deps stored the .class files.
#"Main" → Runs the Main class (which is now a Main.class file inside /app/deps).

CMD ["java","-cp","/app","Main"]

